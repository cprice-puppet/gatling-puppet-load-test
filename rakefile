require 'rototiller'
require 'rspec/core/rake_task'
require 'net/http'
require 'timeout'
require 'json'
require 'yaml'

require './setup/helpers/abs_helper'
include AbsHelper

BASE_ABS_URI = 'https://cinext-abs.delivery.puppetlabs.net/api/v2/'

task :default => :performance

# temporary alternate versions of the performace tasks that use awsdirect

# TODO: replace original version and remove '_awsdirect'
desc 'Provision systems using ABS (or use already set ABS_RESOURCE_HOSTS) and then execute beaker performance setup and tests'
rototiller_task :performance_awsdirect do
  if ENV['PUPPET_GATLING_REPORTS_ONLY'] == 'true' && (!ENV['PUPPET_GATLING_REPORTS_TARGET'] || ENV['PUPPET_GATLING_REPORTS_TARGET'] == '')
    abort 'A valid result folder (i.e. PerfTestLarge-1524848074511) must be specified for PUPPET_GATLING_REPORTS_TARGET if PUPPET_GATLING_REPORTS_ONLY=true'
  end

  Rake::Task["performance_provision_with_abs_awsdirect"].execute unless ENV['ABS_RESOURCE_HOSTS'] ||
      (ENV['BEAKER_HOSTS'] &&
          ENV['BEAKER_HOSTS'] != 'config/beaker_hosts/pe-perf-test.cfg' &&
          ENV['BEAKER_HOSTS'] != 'config/beaker_hosts/foss-perf-test.cfg')
  Rake::Task["performance_without_provision"].execute
  Rake::Task["performance_deprovision_with_abs_awsdirect"].execute unless ENV['BEAKER_PRESERVE_HOSTS'] == 'always' ||
      ((@beaker_cmd.nil? || @beaker_cmd.result.exit_code != 0)&&
          ENV['BEAKER_PRESERVE_HOSTS'] == 'onfail')
end

# TODO: replace original version and remove '_awsdirect'
desc 'Provision systems for the performance task with ABS - included in the performance task'
rototiller_task :performance_provision_with_abs_awsdirect do |t|
  raise "The BEAKER_INSTALL_TYPE env var must be set to either 'pe' or 'foss' to continue" unless
      ENV['BEAKER_INSTALL_TYPE'] == 'pe' || ENV['BEAKER_INSTALL_TYPE'] == 'foss'
  t.add_env({:name => 'BEAKER_PE_DIR', :message => 'The PE download directory, example: http://enterprise.delivery.puppetlabs.net/archives/releases/2017.2.4'}) if ENV['BEAKER_INSTALL_TYPE'] == 'pe'
  t.add_env({:name => 'BEAKER_PE_VER', :message => 'The PE version to install on hosts, example: 2017.2.4'}) if ENV['BEAKER_INSTALL_TYPE'] == 'pe'
  t.add_env({:name => 'ABS_OS', :default => 'centos-7-x86-64-west', :message => 'The OS to provision with ABS: centos-7-x86-64-west (for AWS), or centos-7-x86_64 (for vmpooler)'})

  abs_resource_hosts = abs_get_resource_hosts
  raise 'Unable to provision hosts via ABS' unless abs_resource_hosts
end

# TODO: replace original version and remove '_awsdirect'
desc 'Task to deprovision systems that were provisioned with ABS - included in the performance task following the rules of BEAKER_PRESERVE_HOSTS env var.'
rototiller_task :performance_deprovision_with_abs_awsdirect do
  abs_resource_hosts = abs_return_resource_hosts
  raise 'Failed to deprovision ABS hosts' unless abs_resource_hosts
end

#######

desc 'Provision systems using ABS (or use already set ABS_RESOURCE_HOSTS) and then execute beaker performance setup and tests'
rototiller_task :performance do
  if ENV['PUPPET_GATLING_REPORTS_ONLY'] == 'true' && (!ENV['PUPPET_GATLING_REPORTS_TARGET'] || ENV['PUPPET_GATLING_REPORTS_TARGET'] == '')
    abort 'A valid result folder (i.e. PerfTestLarge-1524848074511) must be specified for PUPPET_GATLING_REPORTS_TARGET if PUPPET_GATLING_REPORTS_ONLY=true'
  end

  Rake::Task["performance_provision_with_abs"].execute unless ENV['ABS_RESOURCE_HOSTS'] ||
      (ENV['BEAKER_HOSTS'] &&
          ENV['BEAKER_HOSTS'] != 'config/beaker_hosts/pe-perf-test.cfg' &&
          ENV['BEAKER_HOSTS'] != 'config/beaker_hosts/foss-perf-test.cfg')
  Rake::Task["performance_without_provision"].execute
  Rake::Task["performance_deprovision_with_abs"].execute unless ENV['BEAKER_PRESERVE_HOSTS'] == 'always' ||
      ((@beaker_cmd.nil? || @beaker_cmd.result.exit_code != 0)&&
          ENV['BEAKER_PRESERVE_HOSTS'] == 'onfail')
end

# TODO: remove; these have been extracted to abs_helper
# def get_abs_token_from_fog_file
#   home = ENV['HOME']
#   fog_path = "#{home}/.fog"
#   token = nil
#
#   if File.exist?(fog_path)
#     fog = YAML.load(File.read(fog_path))
#     token = fog[:default][:abs_token]
#   else
#     puts ".fog file not found in home directory: #{fog_path}"
#   end
#
#   if !token
#     puts "ABS token not found in .fog file at #{fog_path}"
#   end
#   token
# end
#
# def get_abs_token
#   ENV['ABS_TOKEN'] ? token = ENV['ABS_TOKEN'] : token = get_abs_token_from_fog_file
#   if !token
#     abort "An ABS token must be set in either the ABS_TOKEN environment variable or the abs_token parameter in the .fog file"
#   end
#   token
# end
#
# def retry_abs_request(uri, body, timeout, time_increment, invalid_response_bodies = [], valid_response_codes = [202, 200])
#   req = Net::HTTP::Post.new(uri, {'Content-Type' => 'application/json', 'X-Auth-Token' => get_abs_token})
#   req.body = body
#   http = Net::HTTP.new(uri.host, uri.port)
#   http.use_ssl = true
#
#   puts "sending request body: #{body}"
#   puts "to uri: #{uri}"
#
#   res = nil
#   Timeout::timeout(timeout) do
#     while res.nil? || invalid_response_bodies.include?(res.body) || !valid_response_codes.include?(res.code)
#       begin
#         res = http.request(req)
#       rescue => ex
#         puts ex
#         puts ex.backtrace
#       end
#       if res.nil? || invalid_response_bodies.include?(res.body)
#         puts "#{Time.now} - Retrying ABS request..."
#         sleep(time_increment)
#       else
#         break
#       end
#     end
#   end
#   res
# end

desc 'Provision systems for the performance task with ABS - included in the performance task'
rototiller_task :performance_provision_with_abs do |t|
  raise "The BEAKER_INSTALL_TYPE env var must be set to either 'pe' or 'foss' to continue" unless
      ENV['BEAKER_INSTALL_TYPE'] == 'pe' || ENV['BEAKER_INSTALL_TYPE'] == 'foss'
  t.add_env({:name => 'BEAKER_PE_DIR', :message => 'The PE download directory, example: http://enterprise.delivery.puppetlabs.net/archives/releases/2017.2.4'}) if ENV['BEAKER_INSTALL_TYPE'] == 'pe'
  t.add_env({:name => 'BEAKER_PE_VER', :message => 'The PE version to install on hosts, example: 2017.2.4'}) if ENV['BEAKER_INSTALL_TYPE'] == 'pe'

  t.add_env({:name => 'ABS_OS', :default => 'centos-7-x86-64-west', :message => 'The OS to provision with ABS: centos-7-x86-64-west (for AWS), or centos-7-x86_64 (for vmpooler)'})
  # Creating a random job id, since this is required by ABS and needs to be unique. In CI, this task will not be executed.
  ENV['ABS_JOB_ID'] = rand(100000..999999).to_s unless ENV['ABS_JOB_ID']
  uri = URI("#{BASE_ABS_URI}request")

  # Allows us to switch between AWS and VMPooler by selecting different ABS os's.
  # centos-7-x86-64-west is an AWS image, centos-7-x86_64 is vmpooler
  req_body = {'resources': {"#{ENV['ABS_OS']}": 2},'job': { 'id': "#{ENV['ABS_JOB_ID']}", 'tags': {'user': "#{ENV['USER']}"}}}.to_json

  # Wait up to 20 minutes for a response from ABS with provisioned hosts
  res = retry_abs_request(uri, req_body, 1200, 10, ['', nil])

  ENV['ABS_RESOURCE_HOSTS'] = res.body
  puts "ABS_RESOURCE_HOSTS=#{ENV['ABS_RESOURCE_HOSTS']}"
  open('last_abs_resource_hosts.log', 'w') { |f|
    f.puts res.body
    f.puts ENV['ABS_JOB_ID']
  }
end

desc 'Task to deprovision systems that were provisioned with ABS - included in the performance task following the rules of BEAKER_PRESERVE_HOSTS env var.'
rototiller_task :performance_deprovision_with_abs do
  abs_resource_hosts = ENV['ABS_RESOURCE_HOSTS'].nil? ? File.open("last_abs_resource_hosts.log").readlines[0] : ENV['ABS_RESOURCE_HOSTS']
  abs_job_id = ENV['ABS_JOB_ID'].nil? ? File.open("last_abs_resource_hosts.log").readlines[1] : ENV['ABS_JOB_ID']
  raise 'performance_deprovision_with_abs task requires values for env variables: ABS_RESOURCE_HOSTS and ABS_JOB_ID' unless abs_resource_hosts && abs_job_id
  uri = URI("#{BASE_ABS_URI}return")
  req_body = {'job_id': abs_job_id, 'hosts': JSON.parse(abs_resource_hosts)}.to_json

  # Wait up to 30 seconds for a non error response from ABS when de-provisioning
  retry_abs_request(uri, req_body, 30, 5)
end

desc 'Run Performance tests using previously provisioned hosts'
rototiller_task :performance_against_already_provisioned do
  ENV['BEAKER_HOSTS'] ||= "log/latest/hosts_preserved.yml"
  ENV['ABS_RESOURCE_HOSTS'] = File.open("last_abs_resource_hosts.log").readlines[0] if File.exist? "last_abs_resource_hosts.log"
  ENV['BEAKER_PRE_SUITE'] = ""
  Rake::Task["performance_without_provision"].execute
end

desc 'Execute beaker performance setup and tests against existing hosts specified by ABS_RESOURCE_HOSTS env var, intended to be used in CI - use task "performance" for local/dev execution'
rototiller_task :performance_without_provision do |t|
  t.add_env({:name => 'ABS_RESOURCE_HOSTS', :message => 'The string returned from the ABS service describing your hosts'}) if ENV['BEAKER_HOSTS'] == 'config/beaker_hosts/pe-perf-test.cfg' ||
      ENV['BEAKER_HOSTS'] == 'config/beaker_hosts/foss-perf-test.cfg'
  t.add_env({:name => 'ENVIRONMENT_TYPE', :message => 'Either gatling or clamps', :default => 'gatling'})
  t.add_env({:name => 'PUPPET_GATLING_R10K_CONTROL_REPO', :default => 'git@github.com:puppetlabs/puppetlabs-puppetserver_perf_control.git'})
  if ENV['BEAKER_INSTALL_TYPE'] == 'foss'
    t.add_env({:name => 'PUPPET_GATLING_R10K_BASEDIR', :default => '/etc/puppetlabs/code/environments'})
  else
    t.add_env({:name => 'PUPPET_GATLING_R10K_BASEDIR', :default => '/etc/puppetlabs/code-staging/environments'})
  end
  t.add_env({:name => 'PUPPET_GATLING_R10K_ENVIRONMENTS', :default => 'production'})
  t.add_env({:name => 'PUPPET_BIN_DIR', :default => '/opt/puppetlabs/puppet/bin'})
  t.add_env({:name => 'PUPPET_R10K_VERSION', :default => '2.3.0'})
  t.add_env({:name => 'PUPPET_SCALE_CLASS', :default => 'role::by_size::large'})
  t.add_env({:name => 'PUPPET_GATLING_SCENARIO', :default => 'ApplesToApples.json'})
  t.add_env({:name => 'BEAKER_TESTS', :default => 'tests/ApplesToApples.rb'})
  t.add_env({:name => 'BEAKER_POST_SUITE', :default => ''})
  t.add_env({:name => 'PUPPET_SERVER_SERVICE_NAME', :default => 'pe-puppetserver'})
  t.add_env({:name => 'SUT_ARCHIVE_FILES', :default => ''})
  t.add_env({:name => 'PACKAGE_BUILD_VERSION', :default => 'latest'}) if ENV['BEAKER_INSTALL_TYPE'] == 'foss'
  t.add_env({:name => 'PUPPET_AGENT_VERSION', :default => 'latest'}) if ENV['BEAKER_INSTALL_TYPE'] == 'foss'
  t.add_env({:name => 'PUSH_TO_BIGQUERY', :default => 'false',
    :message => 'True if you want to store a new set of results as a baseline value'})

  # env vars needed for Beaker
  @beaker_cmd = t.add_command do |command|
    command.name = "bundle exec beaker"
    command.add_env({:name => 'BEAKER_EXECUTABLE'})

    command.add_option do |option|
      option.name = '--hosts'
      option.message = 'The configuration file that Beaker will use'
      option.add_argument do |arg|
        arg.name = "config/beaker_hosts/pe-perf-test.cfg" if ENV['BEAKER_INSTALL_TYPE'] == 'pe'
        arg.name = "config/beaker_hosts/foss-perf-test.cfg" if ENV['BEAKER_INSTALL_TYPE'] == 'foss'
        arg.add_env({:name => 'BEAKER_HOSTS'})
      end
    end
    # this is specified in the options file
    #   this is here so it can be overridden in the rake task
    #   there is no beaker built-in env var for this
    unless (!ENV['BEAKER_KEYFILE'] || ENV['BEAKER_KEYFILE'] == '') #unless nil or empty
      command.add_option do |option|
        option.name = '--keyfile'
        option.message = 'The SSH key used to access a SUT'
        option.add_argument do |arg|
          arg.name = "#{ENV['HOME']}/.ssh/id_rsa-acceptance"
          arg.add_env({:name => 'BEAKER_KEYFILE'})
        end
      end
    end
    command.add_option do |option|
      option.name = '--log-level'
      option.message = 'The log level under which you want beaker to run'
      option.add_argument do |arg|
        arg.name = 'debug'
        arg.add_env({:name => 'BEAKER_LOG_LEVEL'})
      end
    end
    unless ENV['BEAKER_OPTIONS_FILE'] == ''
      command.add_option do |option|
        option.name = '--options'
        option.message = 'Beaker options file'
        option.add_argument do |arg|
          arg.name = 'setup/options/options_pe.rb' if ENV['BEAKER_INSTALL_TYPE'] == 'pe'
          arg.name = 'setup/options/options_foss.rb' if ENV['BEAKER_INSTALL_TYPE'] == 'foss'
          arg.add_env({:name => 'BEAKER_OPTIONS_FILE'})
        end
      end
    end
    #FIXME this disallows rototiller from showing this env, when it doesn't exist
    unless (!ENV['BEAKER_PRE_SUITE'] || ENV['BEAKER_PRE_SUITE'] == '') #unless nil or empty
      command.add_option do |option|
        option.name = '--pre-suite'
        option.message = 'Beaker pre-suite'
        option.add_argument do |arg|
          arg.name = ''
          arg.add_env({:name => 'BEAKER_PRE_SUITE'})
        end
      end
    end
    unless ENV['BEAKER_POST_SUITE'] == ''
      command.add_option do |option|
        option.name = '--post-suite'
        option.message = 'Beaker post-suite'
        option.add_argument do |arg|
          arg.name = 'post/zzz_copy_sut_archive_files.rb'
          arg.add_env({:name => 'BEAKER_POST_SUITE'})
        end
      end
    end
    unless ENV['BEAKER_TESTS'] == ''
      command.add_option do |option|
        option.name = '--tests'
        option.message = 'Beaker tests'
        option.add_argument do |arg|
          arg.name = 'tests/'
          arg.add_env({:name => 'BEAKER_TESTS'})
        end
      end
    end
    unless (!ENV['BEAKER_HELPER'] || ENV['BEAKER_HELPER'] == '') #unless nil or empty
      command.add_option do |option|
        option.name = '--helper'
        option.message = 'Setup helper ruby scripts, comma separated'
        option.add_argument do |arg|
          arg.add_env({:name => 'BEAKER_HELPER'})
        end
      end
    end
    command.add_option do |option|
      option.name = '--preserve-hosts'
      option.message = 'Whether to preserve hosts or not.'
      option.add_argument do |arg|
        arg.name = 'always'
        arg.add_env({:name => 'BEAKER_PRESERVE_HOSTS'})
      end
    end
    command.add_option do |option|
      option.name = '--type'
      option.message = 'pe or foss'
      option.add_argument do |arg|
        arg.name = 'pe'
        arg.add_env({:name => 'BEAKER_INSTALL_TYPE'})
      end
    end
    puts command.to_str
    # Default:
    # "bundle exec beaker --hosts  --keyfile /Users/samwoods/.ssh/id_rsa-acceptance --log-level debug
    # --pre-suite setup/install_gatling --helper
    # setup/helpers/classification_helper.rb,setup/helpers/ldap_helper.rb,setup/helpers/gatling_config_helper.rb
    # --preserve-hosts always --type pe"
  end

end

desc 'Run Performance setup for clamps'
rototiller_task :performance_clamps do |t|
  ENV['ENVIRONMENT_TYPE'] = 'clamps'
  Rake::Task["performance"].execute
end

desc 'Run Performance setup for gatling'
rototiller_task :performance_gatling do |t|
  ENV['ENVIRONMENT_TYPE'] = 'gatling'
  Rake::Task["performance"].execute
end

desc 'Run Performance setup and a very short iteration of gatling tests'
rototiller_task :acceptance do |t|
  ENV['ENVIRONMENT_TYPE'] = 'gatling'
  ENV['PUPPET_GATLING_SCENARIO'] = 'acceptance.json'
  ENV['BEAKER_HOSTS'] ||= 'config/beaker_hosts/pe-vmpooler.cfg'
  ENV['BEAKER_TESTS'] ||= 'tests/acceptance.rb'
  ENV['BEAKER_POST_SUITE'] = ''
  # Need to change this from an AWS OS image to a vmpooler OS image
  ENV['ABS_OS'] ||= 'centos-7-x86_64'
  Rake::Task["performance"].execute
end

desc "Run spec tests"
RSpec::Core::RakeTask.new(:spec) do |t|
  t.rspec_opts = ['--color']
  t.pattern = 'spec/'
end
